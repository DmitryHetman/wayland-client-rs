var searchIndex = {};
searchIndex["wayland_server"] = {"doc":"","items":[[3,"Display","wayland_server","",null,null],[3,"Client","","",null,null],[3,"ClientId","","",null,null],[3,"RequestIterator","","",null,null],[3,"Global","","",null,null],[3,"GlobalId","","",null,null],[3,"ResourceId","","",null,null],[4,"Request","","All possible wayland requests.",null,null],[13,"Wayland","","",0,null],[4,"ResourceParent","","",null,null],[13,"Global","","",1,null],[13,"Resource","","",1,null],[4,"GlobalInstance","","All possible wayland global instances",null,null],[13,"Wayland","","",2,null],[11,"ptr","","",3,null],[11,"id","","",3,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"ptr","","",5,null],[11,"declare_global","","",5,null],[11,"hash","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"clone","","",6,null],[11,"drop","","",7,null],[11,"id","","",7,null],[11,"fmt","","",0,null],[11,"new","","",8,{"inputs":[],"output":{"name":"requestiterator"}}],[11,"drop","","",8,null],[11,"next","","",8,null],[0,"wayland","","The core wayland protocol",null,null],[4,"WaylandProtocolRequest","wayland_server::wayland","A request generated by the protocol wayland.",null,null],[13,"WlCompositor","","",9,null],[13,"WlShmPool","","",9,null],[13,"WlShm","","",9,null],[13,"WlBuffer","","",9,null],[13,"WlDataOffer","","",9,null],[13,"WlDataSource","","",9,null],[13,"WlDataDevice","","",9,null],[13,"WlDataDeviceManager","","",9,null],[13,"WlShell","","",9,null],[13,"WlShellSurface","","",9,null],[13,"WlSurface","","",9,null],[13,"WlSeat","","",9,null],[13,"WlPointer","","",9,null],[13,"WlKeyboard","","",9,null],[13,"WlTouch","","",9,null],[13,"WlRegion","","",9,null],[13,"WlSubcompositor","","",9,null],[13,"WlSubsurface","","",9,null],[4,"WaylandProtocolGlobalInstance","","",null,null],[13,"Compositor","","",10,null],[13,"DataDeviceManager","","",10,null],[13,"Output","","",10,null],[13,"Seat","","",10,null],[13,"Shell","","",10,null],[13,"Shm","","",10,null],[13,"SubCompositor","","",10,null],[0,"compositor","","",null,null],[3,"WlCompositor","wayland_server::wayland::compositor","the compositor singleton",null,null],[3,"WlRegion","","region interface",null,null],[3,"WlSurface","","an onscreen surface",null,null],[4,"WlCompositorRequest","","",null,null],[13,"CreateSurface","","create new surface",11,null],[13,"CreateRegion","","create new region",11,null],[4,"WlSurfaceRequest","","",null,null],[13,"Destroy","","delete surface",12,null],[13,"Attach","","set the surface contents",12,null],[13,"Damage","","mark part of the surface damaged",12,null],[13,"Frame","","request a frame throttling hint",12,null],[13,"SetOpaqueRegion","","set opaque region",12,null],[13,"SetInputRegion","","set input region",12,null],[13,"Commit","","commit pending surface state",12,null],[13,"SetBufferTransform","","sets the buffer transformation",12,null],[13,"SetBufferScale","","sets the buffer scaling factor",12,null],[13,"DamageBuffer","","mark part of the surface damaged using buffer coordinates",12,null],[4,"WlRegionRequest","","",null,null],[13,"Destroy","","destroy region",13,null],[13,"Add","","add rectangle to region",13,null],[13,"Subtract","","subtract rectangle from region",13,null],[0,"data_device","wayland_server::wayland","",null,null],[3,"WlDataDevice","wayland_server::wayland::data_device","data transfer device",null,null],[3,"WlDataDeviceManager","","data transfer interface",null,null],[3,"WlDataOffer","","offer to transfer data",null,null],[3,"WlDataSource","","offer to transfer data",null,null],[4,"WlDataDeviceRequest","","",null,null],[13,"StartDrag","","start drag-and-drop operation",14,null],[13,"SetSelection","","copy data to the selection",14,null],[13,"Release","","destroy data device",14,null],[4,"WlDataDeviceManagerRequest","","",null,null],[13,"CreateDataSource","","create a new data source",15,null],[13,"GetDataDevice","","create a new data device",15,null],[4,"WlDataOfferRequest","","",null,null],[13,"Accept","","accept one of the offered mime types",16,null],[13,"Receive","","request that the data is transferred",16,null],[13,"Destroy","","destroy data offer",16,null],[13,"Finish","","the offer will no longer be used",16,null],[13,"SetActions","","set the available/preferred drag-and-drop actions",16,null],[4,"WlDataSourceRequest","","",null,null],[13,"Offer","","add an offered mime type",17,null],[13,"Destroy","","destroy the data source",17,null],[13,"SetActions","","set the available drag-and-drop actions",17,null],[0,"WlDataDeviceManagerDndAction","","drag and drop actions",null,null],[3,"WlDataDeviceManagerDndAction","wayland_server::wayland::data_device::WlDataDeviceManagerDndAction","",null,null],[17,"None","","",null,null],[17,"Copy","","",null,null],[17,"Move","","",null,null],[17,"Ask","","",null,null],[11,"hash","","",18,null],[11,"cmp","","",18,null],[11,"partial_cmp","","",18,null],[11,"lt","","",18,null],[11,"le","","",18,null],[11,"gt","","",18,null],[11,"ge","","",18,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"fmt","","",18,null],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"u32"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,null],[11,"is_all","","Returns `true` if all flags are currently set.",18,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,null],[11,"insert","","Inserts the specified flags in-place.",18,null],[11,"remove","","Removes the specified flags in-place.",18,null],[11,"toggle","","Toggles the specified flags in-place.",18,null],[11,"bitor","","Returns the union of the two sets of flags.",18,null],[11,"bitor_assign","","Adds the set of flags.",18,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,null],[11,"bitxor_assign","","Toggles the set of flags.",18,null],[11,"bitand","","Returns the intersection between the two sets of flags.",18,null],[11,"bitand_assign","","Disables all flags disabled in the set.",18,null],[11,"sub","","Returns the set difference of the two sets of flags.",18,null],[11,"sub_assign","","Disables all flags enabled in the set.",18,null],[11,"not","","Returns the complement of this set of flags.",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[0,"output","wayland_server::wayland","",null,null],[3,"WlOutput","wayland_server::wayland::output","compositor output region",null,null],[4,"WlOutputSubpixel","","subpixel geometry information",null,null],[13,"Unknown","","",19,null],[13,"None","","",19,null],[13,"HorizontalRgb","","",19,null],[13,"HorizontalBgr","","",19,null],[13,"VerticalRgb","","",19,null],[13,"VerticalBgr","","",19,null],[4,"WlOutputTransform","","transform from framebuffer to output",null,null],[13,"Normal","","",20,null],[13,"T90","","",20,null],[13,"T180","","",20,null],[13,"T270","","",20,null],[13,"Flipped","","",20,null],[13,"Flipped90","","",20,null],[13,"Flipped180","","",20,null],[13,"Flipped270","","",20,null],[0,"WlOutputMode","","mode information",null,null],[3,"WlOutputMode","wayland_server::wayland::output::WlOutputMode","",null,null],[17,"Current","","indicates this is the current mode",null,null],[17,"Preferred","","indicates this is the preferred mode",null,null],[11,"hash","","",21,null],[11,"cmp","","",21,null],[11,"partial_cmp","","",21,null],[11,"lt","","",21,null],[11,"le","","",21,null],[11,"gt","","",21,null],[11,"ge","","",21,null],[11,"clone","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"fmt","","",21,null],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",21,{"inputs":[{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,null],[11,"is_all","","Returns `true` if all flags are currently set.",21,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,null],[11,"insert","","Inserts the specified flags in-place.",21,null],[11,"remove","","Removes the specified flags in-place.",21,null],[11,"toggle","","Toggles the specified flags in-place.",21,null],[11,"bitor","","Returns the union of the two sets of flags.",21,null],[11,"bitor_assign","","Adds the set of flags.",21,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,null],[11,"bitxor_assign","","Toggles the set of flags.",21,null],[11,"bitand","","Returns the intersection between the two sets of flags.",21,null],[11,"bitand_assign","","Disables all flags disabled in the set.",21,null],[11,"sub","","Returns the set difference of the two sets of flags.",21,null],[11,"sub_assign","","Disables all flags enabled in the set.",21,null],[11,"not","","Returns the complement of this set of flags.",21,null],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"wloutputmode"}}],[0,"seat","wayland_server::wayland","",null,null],[3,"WlKeyboard","wayland_server::wayland::seat","keyboard input device",null,null],[3,"WlPointer","","pointer input device",null,null],[3,"WlSeat","","group of input devices",null,null],[3,"WlTouch","","touchscreen input device",null,null],[4,"WlKeyboardRequest","","",null,null],[13,"Release","","release the keyboard object",22,null],[4,"WlPointerRequest","","",null,null],[13,"SetCursor","","set the pointer surface",23,null],[13,"Release","","release the pointer object",23,null],[4,"WlSeatRequest","","",null,null],[13,"GetPointer","","return pointer object",24,null],[13,"GetKeyboard","","return keyboard object",24,null],[13,"GetTouch","","return touch object",24,null],[13,"Release","","release the seat object",24,null],[4,"WlTouchRequest","","",null,null],[13,"Release","","release the touch object",25,null],[4,"WlKeyboardKeyState","","physical key state",null,null],[13,"Released","","key is not pressed",26,null],[13,"Pressed","","key is pressed",26,null],[4,"WlKeyboardKeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",27,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",27,null],[4,"WlPointerAxis","","axis types",null,null],[13,"VerticalScroll","","",28,null],[13,"HorizontalScroll","","",28,null],[4,"WlPointerButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",29,null],[13,"Pressed","","the button is pressed",29,null],[4,"WlPointerAxisSource","","axis source types",null,null],[13,"Wheel","","a physical wheel",30,null],[13,"Finger","","finger on a touch surface",30,null],[13,"Continuous","","continuous coordinate space",30,null],[0,"WlSeatCapability","","seat capability bitmask",null,null],[3,"WlSeatCapability","wayland_server::wayland::seat::WlSeatCapability","",null,null],[17,"Pointer","","the seat has pointer devices",null,null],[17,"Keyboard","","the seat has one or more keyboards",null,null],[17,"Touch","","the seat has touch devices",null,null],[11,"hash","","",31,null],[11,"cmp","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"clone","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,null],[11,"is_all","","Returns `true` if all flags are currently set.",31,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,null],[11,"insert","","Inserts the specified flags in-place.",31,null],[11,"remove","","Removes the specified flags in-place.",31,null],[11,"toggle","","Toggles the specified flags in-place.",31,null],[11,"bitor","","Returns the union of the two sets of flags.",31,null],[11,"bitor_assign","","Adds the set of flags.",31,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,null],[11,"bitxor_assign","","Toggles the set of flags.",31,null],[11,"bitand","","Returns the intersection between the two sets of flags.",31,null],[11,"bitand_assign","","Disables all flags disabled in the set.",31,null],[11,"sub","","Returns the set difference of the two sets of flags.",31,null],[11,"sub_assign","","Disables all flags enabled in the set.",31,null],[11,"not","","Returns the complement of this set of flags.",31,null],[11,"from_iter","","",31,{"inputs":[{"name":"t"}],"output":{"name":"wlseatcapability"}}],[0,"shell","wayland_server::wayland","",null,null],[3,"WlShell","wayland_server::wayland::shell","create desktop-style surfaces",null,null],[3,"WlShellSurface","","desktop-style metadata interface",null,null],[4,"WlShellRequest","","",null,null],[13,"GetShellSurface","","create a shell surface from a surface",32,null],[4,"WlShellSurfaceRequest","","",null,null],[13,"Pong","","respond to a ping event",33,null],[13,"Move","","start an interactive move",33,null],[13,"Resize","","start an interactive resize",33,null],[13,"SetToplevel","","make the surface a toplevel surface",33,null],[13,"SetTransient","","make the surface a transient surface",33,null],[13,"SetFullscreen","","make the surface a fullscreen surface",33,null],[13,"SetPopup","","make the surface a popup surface",33,null],[13,"SetMaximized","","make the surface a maximized surface",33,null],[13,"SetTitle","","set surface title",33,null],[13,"SetClass","","set surface class",33,null],[4,"WlShellSurfaceFullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",34,null],[13,"Scale","","scale, preserve the surface&#39;s aspect ratio and center on output",34,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",34,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",34,null],[0,"WlShellSurfaceResize","","edge values for resizing",null,null],[3,"WlShellSurfaceResize","wayland_server::wayland::shell::WlShellSurfaceResize","",null,null],[17,"None","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"TopLeft","","",null,null],[17,"BottomLeft","","",null,null],[17,"Right","","",null,null],[17,"TopRight","","",null,null],[17,"BottomRight","","",null,null],[11,"hash","","",35,null],[11,"cmp","","",35,null],[11,"partial_cmp","","",35,null],[11,"lt","","",35,null],[11,"le","","",35,null],[11,"gt","","",35,null],[11,"ge","","",35,null],[11,"clone","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"fmt","","",35,null],[11,"empty","","Returns an empty set of flags.",35,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",35,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",35,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",35,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",35,null],[11,"is_all","","Returns `true` if all flags are currently set.",35,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",35,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",35,null],[11,"insert","","Inserts the specified flags in-place.",35,null],[11,"remove","","Removes the specified flags in-place.",35,null],[11,"toggle","","Toggles the specified flags in-place.",35,null],[11,"bitor","","Returns the union of the two sets of flags.",35,null],[11,"bitor_assign","","Adds the set of flags.",35,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",35,null],[11,"bitxor_assign","","Toggles the set of flags.",35,null],[11,"bitand","","Returns the intersection between the two sets of flags.",35,null],[11,"bitand_assign","","Disables all flags disabled in the set.",35,null],[11,"sub","","Returns the set difference of the two sets of flags.",35,null],[11,"sub_assign","","Disables all flags enabled in the set.",35,null],[11,"not","","Returns the complement of this set of flags.",35,null],[11,"from_iter","","",35,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[0,"WlShellSurfaceTransient","wayland_server::wayland::shell","details of transient behaviour",null,null],[3,"WlShellSurfaceTransient","wayland_server::wayland::shell::WlShellSurfaceTransient","",null,null],[17,"Inactive","","do not set keyboard focus",null,null],[11,"hash","","",36,null],[11,"cmp","","",36,null],[11,"partial_cmp","","",36,null],[11,"lt","","",36,null],[11,"le","","",36,null],[11,"gt","","",36,null],[11,"ge","","",36,null],[11,"clone","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"fmt","","",36,null],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",36,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,null],[11,"is_all","","Returns `true` if all flags are currently set.",36,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,null],[11,"insert","","Inserts the specified flags in-place.",36,null],[11,"remove","","Removes the specified flags in-place.",36,null],[11,"toggle","","Toggles the specified flags in-place.",36,null],[11,"bitor","","Returns the union of the two sets of flags.",36,null],[11,"bitor_assign","","Adds the set of flags.",36,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,null],[11,"bitxor_assign","","Toggles the set of flags.",36,null],[11,"bitand","","Returns the intersection between the two sets of flags.",36,null],[11,"bitand_assign","","Disables all flags disabled in the set.",36,null],[11,"sub","","Returns the set difference of the two sets of flags.",36,null],[11,"sub_assign","","Disables all flags enabled in the set.",36,null],[11,"not","","Returns the complement of this set of flags.",36,null],[11,"from_iter","","",36,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[0,"shm","wayland_server::wayland","",null,null],[3,"WlBuffer","wayland_server::wayland::shm","content for a wl_surface",null,null],[3,"WlShm","","shared memory support",null,null],[3,"WlShmPool","","a shared memory pool",null,null],[4,"WlBufferRequest","","",null,null],[13,"Destroy","","destroy a buffer",37,null],[4,"WlShmRequest","","",null,null],[13,"CreatePool","","create a shm pool",38,null],[4,"WlShmPoolRequest","","",null,null],[13,"CreateBuffer","","create a buffer from the pool",39,null],[13,"Destroy","","destroy the pool",39,null],[13,"Resize","","change the size of the pool mapping",39,null],[4,"WlShmFormat","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format",40,null],[13,"Xrgb8888","","32-bit RGB format",40,null],[13,"C8","","",40,null],[13,"Rgb332","","",40,null],[13,"Bgr233","","",40,null],[13,"Xrgb4444","","",40,null],[13,"Xbgr4444","","",40,null],[13,"Rgbx4444","","",40,null],[13,"Bgrx4444","","",40,null],[13,"Argb4444","","",40,null],[13,"Abgr4444","","",40,null],[13,"Rgba4444","","",40,null],[13,"Bgra4444","","",40,null],[13,"Xrgb1555","","",40,null],[13,"Xbgr1555","","",40,null],[13,"Rgbx5551","","",40,null],[13,"Bgrx5551","","",40,null],[13,"Argb1555","","",40,null],[13,"Abgr1555","","",40,null],[13,"Rgba5551","","",40,null],[13,"Bgra5551","","",40,null],[13,"Rgb565","","",40,null],[13,"Bgr565","","",40,null],[13,"Rgb888","","",40,null],[13,"Bgr888","","",40,null],[13,"Xbgr8888","","",40,null],[13,"Rgbx8888","","",40,null],[13,"Bgrx8888","","",40,null],[13,"Abgr8888","","",40,null],[13,"Rgba8888","","",40,null],[13,"Bgra8888","","",40,null],[13,"Xrgb2101010","","",40,null],[13,"Xbgr2101010","","",40,null],[13,"Rgbx1010102","","",40,null],[13,"Bgrx1010102","","",40,null],[13,"Argb2101010","","",40,null],[13,"Abgr2101010","","",40,null],[13,"Rgba1010102","","",40,null],[13,"Bgra1010102","","",40,null],[13,"Yuyv","","",40,null],[13,"Yvyu","","",40,null],[13,"Uyvy","","",40,null],[13,"Vyuy","","",40,null],[13,"Ayuv","","",40,null],[13,"Nv12","","",40,null],[13,"Nv21","","",40,null],[13,"Nv16","","",40,null],[13,"Nv61","","",40,null],[13,"Yuv410","","",40,null],[13,"Yvu410","","",40,null],[13,"Yuv411","","",40,null],[13,"Yvu411","","",40,null],[13,"Yuv420","","",40,null],[13,"Yvu420","","",40,null],[13,"Yuv422","","",40,null],[13,"Yvu422","","",40,null],[13,"Yuv444","","",40,null],[13,"Yvu444","","",40,null],[0,"subcompositor","wayland_server::wayland","",null,null],[3,"WlSubcompositor","wayland_server::wayland::subcompositor","sub-surface compositing",null,null],[3,"WlSubsurface","","sub-surface interface to a wl_surface",null,null],[8,"IteratorDispatch","wayland_server","",null,null],[10,"get_iterator","","",41,null],[8,"GlobalResource","","",null,null],[16,"Creator","","",42,null],[8,"Resource","","",null,null],[10,"ptr","","",43,null],[10,"interface","","",43,null],[10,"interface_name","","The internal name of this interface, as advertized by the registry if it is a global.",43,{"inputs":[],"output":{"name":"str"}}],[10,"max_version","","The maximum version of the interface handled by this library",43,{"inputs":[],"output":{"name":"u32"}}],[10,"bound_version","","The version this resource has been bound with",43,null],[10,"id","","Get the id of this resource",43,null],[10,"client_id","","Get the id of the client associated with this resource",43,null],[10,"from_ptr","","Creates a proxy from a fresh ptr",43,null],[10,"from_ptr_no_own","","Creates a proxy from a ptr that is managed elsewhere",43,null],[10,"set_req_iterator","","Set the request iterator associated to this proxy",43,null],[11,"hash","","",44,null],[11,"fmt","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"clone","","",44,null],[11,"hash","wayland_server::wayland::data_device::WlDataDeviceManagerDndAction","",18,null],[11,"cmp","","",18,null],[11,"partial_cmp","","",18,null],[11,"lt","","",18,null],[11,"le","","",18,null],[11,"gt","","",18,null],[11,"ge","","",18,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"fmt","","",18,null],[11,"empty","","Returns an empty set of flags.",18,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"all","","Returns the set containing all flags.",18,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",18,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",18,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",18,{"inputs":[{"name":"u32"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",18,null],[11,"is_all","","Returns `true` if all flags are currently set.",18,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",18,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",18,null],[11,"insert","","Inserts the specified flags in-place.",18,null],[11,"remove","","Removes the specified flags in-place.",18,null],[11,"toggle","","Toggles the specified flags in-place.",18,null],[11,"bitor","","Returns the union of the two sets of flags.",18,null],[11,"bitor_assign","","Adds the set of flags.",18,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",18,null],[11,"bitxor_assign","","Toggles the set of flags.",18,null],[11,"bitand","","Returns the intersection between the two sets of flags.",18,null],[11,"bitand_assign","","Disables all flags disabled in the set.",18,null],[11,"sub","","Returns the set difference of the two sets of flags.",18,null],[11,"sub_assign","","Disables all flags enabled in the set.",18,null],[11,"not","","Returns the complement of this set of flags.",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"t"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"hash","wayland_server::wayland::shell::WlShellSurfaceResize","",35,null],[11,"cmp","","",35,null],[11,"partial_cmp","","",35,null],[11,"lt","","",35,null],[11,"le","","",35,null],[11,"gt","","",35,null],[11,"ge","","",35,null],[11,"clone","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"fmt","","",35,null],[11,"empty","","Returns an empty set of flags.",35,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",35,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",35,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",35,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",35,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",35,null],[11,"is_all","","Returns `true` if all flags are currently set.",35,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",35,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",35,null],[11,"insert","","Inserts the specified flags in-place.",35,null],[11,"remove","","Removes the specified flags in-place.",35,null],[11,"toggle","","Toggles the specified flags in-place.",35,null],[11,"bitor","","Returns the union of the two sets of flags.",35,null],[11,"bitor_assign","","Adds the set of flags.",35,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",35,null],[11,"bitxor_assign","","Toggles the set of flags.",35,null],[11,"bitand","","Returns the intersection between the two sets of flags.",35,null],[11,"bitand_assign","","Disables all flags disabled in the set.",35,null],[11,"sub","","Returns the set difference of the two sets of flags.",35,null],[11,"sub_assign","","Disables all flags enabled in the set.",35,null],[11,"not","","Returns the complement of this set of flags.",35,null],[11,"from_iter","","",35,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"hash","wayland_server::wayland::shell::WlShellSurfaceTransient","",36,null],[11,"cmp","","",36,null],[11,"partial_cmp","","",36,null],[11,"lt","","",36,null],[11,"le","","",36,null],[11,"gt","","",36,null],[11,"ge","","",36,null],[11,"clone","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"fmt","","",36,null],[11,"empty","","Returns an empty set of flags.",36,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",36,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",36,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",36,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",36,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",36,null],[11,"is_all","","Returns `true` if all flags are currently set.",36,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",36,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",36,null],[11,"insert","","Inserts the specified flags in-place.",36,null],[11,"remove","","Removes the specified flags in-place.",36,null],[11,"toggle","","Toggles the specified flags in-place.",36,null],[11,"bitor","","Returns the union of the two sets of flags.",36,null],[11,"bitor_assign","","Adds the set of flags.",36,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",36,null],[11,"bitxor_assign","","Toggles the set of flags.",36,null],[11,"bitand","","Returns the intersection between the two sets of flags.",36,null],[11,"bitand_assign","","Disables all flags disabled in the set.",36,null],[11,"sub","","Returns the set difference of the two sets of flags.",36,null],[11,"sub_assign","","Disables all flags enabled in the set.",36,null],[11,"not","","Returns the complement of this set of flags.",36,null],[11,"from_iter","","",36,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"hash","wayland_server::wayland::seat::WlSeatCapability","",31,null],[11,"cmp","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"clone","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"fmt","","",31,null],[11,"empty","","Returns an empty set of flags.",31,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",31,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",31,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",31,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",31,{"inputs":[{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",31,null],[11,"is_all","","Returns `true` if all flags are currently set.",31,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",31,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",31,null],[11,"insert","","Inserts the specified flags in-place.",31,null],[11,"remove","","Removes the specified flags in-place.",31,null],[11,"toggle","","Toggles the specified flags in-place.",31,null],[11,"bitor","","Returns the union of the two sets of flags.",31,null],[11,"bitor_assign","","Adds the set of flags.",31,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",31,null],[11,"bitxor_assign","","Toggles the set of flags.",31,null],[11,"bitand","","Returns the intersection between the two sets of flags.",31,null],[11,"bitand_assign","","Disables all flags disabled in the set.",31,null],[11,"sub","","Returns the set difference of the two sets of flags.",31,null],[11,"sub_assign","","Disables all flags enabled in the set.",31,null],[11,"not","","Returns the complement of this set of flags.",31,null],[11,"from_iter","","",31,{"inputs":[{"name":"t"}],"output":{"name":"wlseatcapability"}}],[11,"hash","wayland_server::wayland::output::WlOutputMode","",21,null],[11,"cmp","","",21,null],[11,"partial_cmp","","",21,null],[11,"lt","","",21,null],[11,"le","","",21,null],[11,"gt","","",21,null],[11,"ge","","",21,null],[11,"clone","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"fmt","","",21,null],[11,"empty","","Returns an empty set of flags.",21,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",21,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",21,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",21,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",21,{"inputs":[{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",21,null],[11,"is_all","","Returns `true` if all flags are currently set.",21,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",21,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",21,null],[11,"insert","","Inserts the specified flags in-place.",21,null],[11,"remove","","Removes the specified flags in-place.",21,null],[11,"toggle","","Toggles the specified flags in-place.",21,null],[11,"bitor","","Returns the union of the two sets of flags.",21,null],[11,"bitor_assign","","Adds the set of flags.",21,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",21,null],[11,"bitxor_assign","","Toggles the set of flags.",21,null],[11,"bitand","","Returns the intersection between the two sets of flags.",21,null],[11,"bitand_assign","","Disables all flags disabled in the set.",21,null],[11,"sub","","Returns the set difference of the two sets of flags.",21,null],[11,"sub_assign","","Disables all flags enabled in the set.",21,null],[11,"not","","Returns the complement of this set of flags.",21,null],[11,"from_iter","","",21,{"inputs":[{"name":"t"}],"output":{"name":"wloutputmode"}}],[11,"fmt","wayland_server::wayland","",9,null],[11,"fmt","wayland_server::wayland::shm","",40,null],[11,"fmt","wayland_server::wayland::shell","",34,null],[11,"fmt","wayland_server::wayland::seat","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",30,null],[11,"fmt","","",27,null],[11,"fmt","","",26,null],[11,"fmt","wayland_server::wayland::output","",19,null],[11,"fmt","","",20,null],[11,"ptr","wayland_server::wayland::compositor","",45,null],[11,"interface","","",45,null],[11,"interface_name","","",45,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",45,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",45,null],[11,"id","","",45,null],[11,"client_id","","",45,null],[11,"from_ptr","","",45,null],[11,"from_ptr_no_own","","",45,null],[11,"set_req_iterator","","",45,null],[11,"fmt","","",45,null],[11,"fmt","","",11,null],[11,"drop","","",45,null],[11,"ptr","wayland_server::wayland::shm","",46,null],[11,"interface","","",46,null],[11,"interface_name","","",46,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",46,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",46,null],[11,"id","","",46,null],[11,"client_id","","",46,null],[11,"from_ptr","","",46,null],[11,"from_ptr_no_own","","",46,null],[11,"set_req_iterator","","",46,null],[11,"fmt","","",46,null],[11,"fmt","","",39,null],[11,"drop","","",46,null],[11,"ptr","","",47,null],[11,"interface","","",47,null],[11,"interface_name","","",47,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",47,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",47,null],[11,"id","","",47,null],[11,"client_id","","",47,null],[11,"from_ptr","","",47,null],[11,"from_ptr_no_own","","",47,null],[11,"set_req_iterator","","",47,null],[11,"fmt","","",47,null],[11,"fmt","","",38,null],[11,"send_format","","pixel format description",47,null],[11,"drop","","",47,null],[11,"ptr","","",48,null],[11,"interface","","",48,null],[11,"interface_name","","",48,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",48,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",48,null],[11,"id","","",48,null],[11,"client_id","","",48,null],[11,"from_ptr","","",48,null],[11,"from_ptr_no_own","","",48,null],[11,"set_req_iterator","","",48,null],[11,"fmt","","",48,null],[11,"fmt","","",37,null],[11,"send_release","","compositor releases buffer",48,null],[11,"drop","","",48,null],[11,"ptr","wayland_server::wayland::data_device","",49,null],[11,"interface","","",49,null],[11,"interface_name","","",49,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",49,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",49,null],[11,"id","","",49,null],[11,"client_id","","",49,null],[11,"from_ptr","","",49,null],[11,"from_ptr_no_own","","",49,null],[11,"set_req_iterator","","",49,null],[11,"fmt","","",49,null],[11,"fmt","","",16,null],[11,"send_offer","","advertise offered mime type",49,null],[11,"send_source_actions","","notify the source-side available actions",49,null],[11,"send_action","","notify the selected action",49,null],[11,"drop","","",49,null],[11,"ptr","","",50,null],[11,"interface","","",50,null],[11,"interface_name","","",50,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",50,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",50,null],[11,"id","","",50,null],[11,"client_id","","",50,null],[11,"from_ptr","","",50,null],[11,"from_ptr_no_own","","",50,null],[11,"set_req_iterator","","",50,null],[11,"fmt","","",50,null],[11,"fmt","","",17,null],[11,"send_target","","a target accepts an offered mime type",50,null],[11,"send_send","","send the data",50,null],[11,"send_cancelled","","selection was cancelled",50,null],[11,"send_dnd_drop_performed","","the drag-and-drop operation physically finished",50,null],[11,"send_dnd_finished","","the drag-and-drop operation concluded",50,null],[11,"send_action","","notify the selected action",50,null],[11,"drop","","",50,null],[11,"ptr","","",51,null],[11,"interface","","",51,null],[11,"interface_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",51,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",51,null],[11,"id","","",51,null],[11,"client_id","","",51,null],[11,"from_ptr","","",51,null],[11,"from_ptr_no_own","","",51,null],[11,"set_req_iterator","","",51,null],[11,"fmt","","",51,null],[11,"fmt","","",14,null],[11,"send_data_offer","","introduce a new wl_data_offer",51,null],[11,"send_enter","","initiate drag-and-drop session",51,null],[11,"send_leave","","end drag-and-drop session",51,null],[11,"send_motion","","drag-and-drop session motion",51,null],[11,"send_drop","","end drag-and-drop session successfully",51,null],[11,"send_selection","","advertise new selection",51,null],[11,"drop","","",51,null],[11,"ptr","","",52,null],[11,"interface","","",52,null],[11,"interface_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",52,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",52,null],[11,"id","","",52,null],[11,"client_id","","",52,null],[11,"from_ptr","","",52,null],[11,"from_ptr_no_own","","",52,null],[11,"set_req_iterator","","",52,null],[11,"fmt","","",52,null],[11,"fmt","","",15,null],[11,"drop","","",52,null],[11,"ptr","wayland_server::wayland::shell","",53,null],[11,"interface","","",53,null],[11,"interface_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",53,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",53,null],[11,"id","","",53,null],[11,"client_id","","",53,null],[11,"from_ptr","","",53,null],[11,"from_ptr_no_own","","",53,null],[11,"set_req_iterator","","",53,null],[11,"fmt","","",53,null],[11,"fmt","","",32,null],[11,"drop","","",53,null],[11,"ptr","","",54,null],[11,"interface","","",54,null],[11,"interface_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",54,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",54,null],[11,"id","","",54,null],[11,"client_id","","",54,null],[11,"from_ptr","","",54,null],[11,"from_ptr_no_own","","",54,null],[11,"set_req_iterator","","",54,null],[11,"fmt","","",54,null],[11,"fmt","","",33,null],[11,"send_ping","","ping client",54,null],[11,"send_configure","","suggest resize",54,null],[11,"send_popup_done","","popup interaction is done",54,null],[11,"drop","","",54,null],[11,"ptr","wayland_server::wayland::compositor","",55,null],[11,"interface","","",55,null],[11,"interface_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",55,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",55,null],[11,"id","","",55,null],[11,"client_id","","",55,null],[11,"from_ptr","","",55,null],[11,"from_ptr_no_own","","",55,null],[11,"set_req_iterator","","",55,null],[11,"fmt","","",55,null],[11,"fmt","","",12,null],[11,"send_enter","","surface enters an output",55,null],[11,"send_leave","","surface leaves an output",55,null],[11,"drop","","",55,null],[11,"ptr","wayland_server::wayland::seat","",56,null],[11,"interface","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",56,null],[11,"id","","",56,null],[11,"client_id","","",56,null],[11,"from_ptr","","",56,null],[11,"from_ptr_no_own","","",56,null],[11,"set_req_iterator","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",24,null],[11,"send_capabilities","","seat capabilities changed",56,null],[11,"send_name","","unique identifier for this seat",56,null],[11,"drop","","",56,null],[11,"ptr","","",57,null],[11,"interface","","",57,null],[11,"interface_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",57,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",57,null],[11,"id","","",57,null],[11,"client_id","","",57,null],[11,"from_ptr","","",57,null],[11,"from_ptr_no_own","","",57,null],[11,"set_req_iterator","","",57,null],[11,"fmt","","",57,null],[11,"fmt","","",23,null],[11,"send_enter","","enter event",57,null],[11,"send_leave","","leave event",57,null],[11,"send_motion","","pointer motion event",57,null],[11,"send_button","","pointer button event",57,null],[11,"send_axis","","axis event",57,null],[11,"send_frame","","end of a pointer event sequence",57,null],[11,"send_axis_source","","axis source event",57,null],[11,"send_axis_stop","","axis stop event",57,null],[11,"send_axis_discrete","","axis click event",57,null],[11,"drop","","",57,null],[11,"ptr","","",58,null],[11,"interface","","",58,null],[11,"interface_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",58,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",58,null],[11,"id","","",58,null],[11,"client_id","","",58,null],[11,"from_ptr","","",58,null],[11,"from_ptr_no_own","","",58,null],[11,"set_req_iterator","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",22,null],[11,"send_keymap","","keyboard mapping",58,null],[11,"send_enter","","enter event",58,null],[11,"send_leave","","leave event",58,null],[11,"send_key","","key event",58,null],[11,"send_modifiers","","modifier and group state",58,null],[11,"send_repeat_info","","repeat rate and delay",58,null],[11,"drop","","",58,null],[11,"ptr","","",59,null],[11,"interface","","",59,null],[11,"interface_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",59,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",59,null],[11,"id","","",59,null],[11,"client_id","","",59,null],[11,"from_ptr","","",59,null],[11,"from_ptr_no_own","","",59,null],[11,"set_req_iterator","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",25,null],[11,"send_down","","touch down event and beginning of a touch sequence",59,null],[11,"send_up","","end of a touch event sequence",59,null],[11,"send_motion","","update of touch point coordinates",59,null],[11,"send_frame","","end of touch frame event",59,null],[11,"send_cancel","","touch session cancelled",59,null],[11,"drop","","",59,null],[11,"ptr","wayland_server::wayland::output","",60,null],[11,"interface","","",60,null],[11,"interface_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",60,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",60,null],[11,"id","","",60,null],[11,"client_id","","",60,null],[11,"from_ptr","","",60,null],[11,"from_ptr_no_own","","",60,null],[11,"set_req_iterator","","",60,null],[11,"fmt","","",60,null],[11,"send_geometry","","properties of the output",60,null],[11,"send_mode","","advertise available modes for the output",60,null],[11,"send_done","","sent all information about output",60,null],[11,"send_scale","","output scaling properties",60,null],[11,"drop","","",60,null],[11,"ptr","wayland_server::wayland::compositor","",61,null],[11,"interface","","",61,null],[11,"interface_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",61,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",61,null],[11,"id","","",61,null],[11,"client_id","","",61,null],[11,"from_ptr","","",61,null],[11,"from_ptr_no_own","","",61,null],[11,"set_req_iterator","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",13,null],[11,"drop","","",61,null],[11,"ptr","wayland_server::wayland::subcompositor","",62,null],[11,"interface","","",62,null],[11,"interface_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",62,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",62,null],[11,"id","","",62,null],[11,"client_id","","",62,null],[11,"from_ptr","","",62,null],[11,"from_ptr_no_own","","",62,null],[11,"set_req_iterator","","",62,null],[11,"fmt","","",62,null],[11,"drop","","",62,null],[11,"ptr","","",63,null],[11,"interface","","",63,null],[11,"interface_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"max_version","","",63,{"inputs":[],"output":{"name":"u32"}}],[11,"bound_version","","",63,null],[11,"id","","",63,null],[11,"client_id","","",63,null],[11,"from_ptr","","",63,null],[11,"from_ptr_no_own","","",63,null],[11,"set_req_iterator","","",63,null],[11,"fmt","","",63,null],[11,"drop","","",63,null]],"paths":[[4,"Request"],[4,"ResourceParent"],[4,"GlobalInstance"],[3,"Client"],[3,"ClientId"],[3,"Display"],[3,"GlobalId"],[3,"Global"],[3,"RequestIterator"],[4,"WaylandProtocolRequest"],[4,"WaylandProtocolGlobalInstance"],[4,"WlCompositorRequest"],[4,"WlSurfaceRequest"],[4,"WlRegionRequest"],[4,"WlDataDeviceRequest"],[4,"WlDataDeviceManagerRequest"],[4,"WlDataOfferRequest"],[4,"WlDataSourceRequest"],[3,"WlDataDeviceManagerDndAction"],[4,"WlOutputSubpixel"],[4,"WlOutputTransform"],[3,"WlOutputMode"],[4,"WlKeyboardRequest"],[4,"WlPointerRequest"],[4,"WlSeatRequest"],[4,"WlTouchRequest"],[4,"WlKeyboardKeyState"],[4,"WlKeyboardKeymapFormat"],[4,"WlPointerAxis"],[4,"WlPointerButtonState"],[4,"WlPointerAxisSource"],[3,"WlSeatCapability"],[4,"WlShellRequest"],[4,"WlShellSurfaceRequest"],[4,"WlShellSurfaceFullscreenMethod"],[3,"WlShellSurfaceResize"],[3,"WlShellSurfaceTransient"],[4,"WlBufferRequest"],[4,"WlShmRequest"],[4,"WlShmPoolRequest"],[4,"WlShmFormat"],[8,"IteratorDispatch"],[8,"GlobalResource"],[8,"Resource"],[3,"ResourceId"],[3,"WlCompositor"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"WlShell"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"WlOutput"],[3,"WlRegion"],[3,"WlSubcompositor"],[3,"WlSubsurface"]]};
searchIndex["wayland_client"] = {"doc":"Wayland client library bindings","items":[[3,"EventIterator","wayland_client","An event iterator",null,null],[3,"ReadEventsGuard","","A guard over a read intention.",null,null],[3,"ProxyId","","An opaque identifier for Proxys",null,null],[4,"Event","","All possible wayland events.",null,null],[13,"Wayland","","An event from the core wayland protocol",0,null],[13,"PresentationTime","","An event from the protocol extension presentation-time",0,null],[13,"Viewporter","","An event from the protocol extension viewporter",0,null],[13,"XdgShellUnstableV5","","An event from the protocol extension xdg-shell",0,null],[5,"is_available","","Checks if the wayland lib is available",null,{"inputs":[],"output":{"name":"bool"}}],[11,"fmt","","",0,null],[11,"next_event_dispatch","","Retrieves the next event in this iterator.",1,null],[11,"next_event","","Retrieves the next event in this iterator.",1,null],[11,"sync_roundtrip","","Synchronous roundtrip",1,null],[11,"dispatch_pending","","Non-blocking dispatch",1,null],[11,"dispatch","","Blocking dispatch",1,null],[11,"prepare_read","","Prepare an conccurent read",1,null],[11,"next","","",1,null],[11,"drop","","",1,null],[11,"read_events","","Read events",2,null],[11,"cancel","","Cancel the read",2,null],[11,"drop","","",2,null],[0,"egl","","EGL utilities",null,null],[3,"WlEglSurface","wayland_client::egl","EGL surface",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","Create an EGL surface from a wayland surface",3,{"inputs":[{"name":"wlsurface"},{"name":"i32"},{"name":"i32"}],"output":{"name":"wleglsurface"}}],[11,"destroy","","Destroy the EGL surface, giving back the original wayland surface",3,null],[11,"get_size","","Fetch current size of the EGL surface",3,null],[11,"resize","","Resize the EGL surface",3,null],[11,"egl_surface_ptr","","Raw pointer to the EGL surface",3,null],[11,"egl_surfaceptr","","Raw pointer to the EGL surface",3,null],[11,"drop","","",3,null],[11,"deref","","",3,null],[0,"cursor","wayland_client","Cursor utilities",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"inputs":[{"name":"option"},{"name":"u32"},{"name":"wlshm"}],"output":{"name":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",4,null],[11,"drop","","",4,null],[11,"name","","Retrieve the name of this cursor.",5,null],[11,"image_count","","Retrieve the number of images contained in this\nanimated cursor",5,null],[11,"frame","","Retrieve the image number of cursor animation.",5,null],[11,"frame_and_duration","","Retrieve the image number and its duration.",5,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",5,null],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",5,null],[11,"deref","","",6,null],[11,"drop","","",6,null],[0,"wayland","wayland_client","The core wayland protocol",null,null],[3,"WlCallback","wayland_client::wayland","callback object",null,null],[3,"WlDisplay","","core global object",null,null],[3,"WlRegistry","","global registry object",null,null],[4,"WlCallbackEvent","","",null,null],[13,"Done","","done event",7,null],[4,"WlDisplayEvent","","",null,null],[13,"Error","","fatal error event",8,null],[13,"DeleteId","","acknowledge object ID deletion",8,null],[4,"WlRegistryEvent","","",null,null],[13,"Global","","announce global object",9,null],[13,"GlobalRemove","","announce removal of global object",9,null],[4,"WaylandProtocolEvent","","An event generated by the protocol wayland.",null,null],[13,"WlDisplay","","",10,null],[13,"WlRegistry","","",10,null],[13,"WlCallback","","",10,null],[13,"WlShm","","",10,null],[13,"WlBuffer","","",10,null],[13,"WlDataOffer","","",10,null],[13,"WlDataSource","","",10,null],[13,"WlDataDevice","","",10,null],[13,"WlShellSurface","","",10,null],[13,"WlSurface","","",10,null],[13,"WlSeat","","",10,null],[13,"WlPointer","","",10,null],[13,"WlKeyboard","","",10,null],[13,"WlTouch","","",10,null],[13,"WlOutput","","",10,null],[4,"ConnectError","","Enum representing the possible reasons why connecting to the wayland server failed",null,null],[13,"NoWaylandLib","","The library was compiled with the `dlopen` feature, and the `libwayland-client.so`\nlibrary could not be found at runtime",11,null],[13,"NoCompositorListening","","Any needed library was found, but the listening socket of the server could not be\nfound.",11,null],[5,"get_display","","Connect to the compositor socket",null,{"inputs":[],"output":{"name":"result"}}],[0,"compositor","","Objects related to the `wl_compositor` global",null,null],[3,"WlCompositor","wayland_client::wayland::compositor","the compositor singleton",null,null],[3,"WlRegion","","region interface",null,null],[3,"WlSurface","","an onscreen surface",null,null],[4,"WlSurfaceEvent","","",null,null],[13,"Enter","","surface enters an output",12,null],[13,"Leave","","surface leaves an output",12,null],[0,"data_device","wayland_client::wayland","Objects related to the `wl_data_device_manager` global",null,null],[3,"WlDataDevice","wayland_client::wayland::data_device","data transfer device",null,null],[3,"WlDataDeviceManager","","data transfer interface",null,null],[3,"WlDataOffer","","offer to transfer data",null,null],[3,"WlDataSource","","offer to transfer data",null,null],[4,"WlDataDeviceEvent","","",null,null],[13,"DataOffer","","introduce a new wl_data_offer",13,null],[13,"Enter","","initiate drag-and-drop session",13,null],[13,"Leave","","end drag-and-drop session",13,null],[13,"Motion","","drag-and-drop session motion",13,null],[13,"Drop","","end drag-and-drop session successfully",13,null],[13,"Selection","","advertise new selection",13,null],[4,"WlDataOfferEvent","","",null,null],[13,"Offer","","advertise offered mime type",14,null],[13,"SourceActions","","notify the source-side available actions",14,null],[13,"Action","","notify the selected action",14,null],[4,"WlDataSourceEvent","","",null,null],[13,"Target","","a target accepts an offered mime type",15,null],[13,"Send","","send the data",15,null],[13,"Cancelled","","selection was cancelled",15,null],[13,"DndDropPerformed","","the drag-and-drop operation physically finished",15,null],[13,"DndFinished","","the drag-and-drop operation concluded",15,null],[13,"Action","","notify the selected action",15,null],[0,"WlDataDeviceManagerDndAction","","drag and drop actions",null,null],[3,"WlDataDeviceManagerDndAction","wayland_client::wayland::data_device::WlDataDeviceManagerDndAction","",null,null],[17,"None","","",null,null],[17,"Copy","","",null,null],[17,"Move","","",null,null],[17,"Ask","","",null,null],[11,"hash","","",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"u32"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,null],[11,"is_all","","Returns `true` if all flags are currently set.",16,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,null],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"bitor","","Returns the union of the two sets of flags.",16,null],[11,"bitor_assign","","Adds the set of flags.",16,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,null],[11,"bitxor_assign","","Toggles the set of flags.",16,null],[11,"bitand","","Returns the intersection between the two sets of flags.",16,null],[11,"bitand_assign","","Disables all flags disabled in the set.",16,null],[11,"sub","","Returns the set difference of the two sets of flags.",16,null],[11,"sub_assign","","Disables all flags enabled in the set.",16,null],[11,"not","","Returns the complement of this set of flags.",16,null],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[0,"output","wayland_client::wayland","Objects related to the `wl_output` globals",null,null],[3,"WlOutput","wayland_client::wayland::output","compositor output region",null,null],[4,"WlOutputEvent","","",null,null],[13,"Geometry","","properties of the output",17,null],[13,"Mode","","advertise available modes for the output",17,null],[13,"Done","","sent all information about output",17,null],[13,"Scale","","output scaling properties",17,null],[4,"WlOutputSubpixel","","subpixel geometry information",null,null],[13,"Unknown","","",18,null],[13,"None","","",18,null],[13,"HorizontalRgb","","",18,null],[13,"HorizontalBgr","","",18,null],[13,"VerticalRgb","","",18,null],[13,"VerticalBgr","","",18,null],[4,"WlOutputTransform","","transform from framebuffer to output",null,null],[13,"Normal","","",19,null],[13,"T90","","",19,null],[13,"T180","","",19,null],[13,"T270","","",19,null],[13,"Flipped","","",19,null],[13,"Flipped90","","",19,null],[13,"Flipped180","","",19,null],[13,"Flipped270","","",19,null],[0,"WlOutputMode","","mode information",null,null],[3,"WlOutputMode","wayland_client::wayland::output::WlOutputMode","",null,null],[17,"Current","","indicates this is the current mode",null,null],[17,"Preferred","","indicates this is the preferred mode",null,null],[11,"hash","","",20,null],[11,"cmp","","",20,null],[11,"partial_cmp","","",20,null],[11,"lt","","",20,null],[11,"le","","",20,null],[11,"gt","","",20,null],[11,"ge","","",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"fmt","","",20,null],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,null],[11,"is_all","","Returns `true` if all flags are currently set.",20,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,null],[11,"insert","","Inserts the specified flags in-place.",20,null],[11,"remove","","Removes the specified flags in-place.",20,null],[11,"toggle","","Toggles the specified flags in-place.",20,null],[11,"bitor","","Returns the union of the two sets of flags.",20,null],[11,"bitor_assign","","Adds the set of flags.",20,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,null],[11,"bitxor_assign","","Toggles the set of flags.",20,null],[11,"bitand","","Returns the intersection between the two sets of flags.",20,null],[11,"bitand_assign","","Disables all flags disabled in the set.",20,null],[11,"sub","","Returns the set difference of the two sets of flags.",20,null],[11,"sub_assign","","Disables all flags enabled in the set.",20,null],[11,"not","","Returns the complement of this set of flags.",20,null],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"wloutputmode"}}],[0,"seat","wayland_client::wayland","Objects related to the `wl_seat` globals",null,null],[3,"WlKeyboard","wayland_client::wayland::seat","keyboard input device",null,null],[3,"WlPointer","","pointer input device",null,null],[3,"WlSeat","","group of input devices",null,null],[3,"WlTouch","","touchscreen input device",null,null],[4,"WlKeyboardEvent","","",null,null],[13,"Keymap","","keyboard mapping",21,null],[13,"Enter","","enter event",21,null],[13,"Leave","","leave event",21,null],[13,"Key","","key event",21,null],[13,"Modifiers","","modifier and group state",21,null],[13,"RepeatInfo","","repeat rate and delay",21,null],[4,"WlPointerEvent","","",null,null],[13,"Enter","","enter event",22,null],[13,"Leave","","leave event",22,null],[13,"Motion","","pointer motion event",22,null],[13,"Button","","pointer button event",22,null],[13,"Axis","","axis event",22,null],[13,"Frame","","end of a pointer event sequence",22,null],[13,"AxisSource","","axis source event",22,null],[13,"AxisStop","","axis stop event",22,null],[13,"AxisDiscrete","","axis click event",22,null],[4,"WlSeatEvent","","",null,null],[13,"Capabilities","","seat capabilities changed",23,null],[13,"Name","","unique identifier for this seat",23,null],[4,"WlTouchEvent","","",null,null],[13,"Down","","touch down event and beginning of a touch sequence",24,null],[13,"Up","","end of a touch event sequence",24,null],[13,"Motion","","update of touch point coordinates",24,null],[13,"Frame","","end of touch frame event",24,null],[13,"Cancel","","touch session cancelled",24,null],[4,"WlKeyboardKeyState","","physical key state",null,null],[13,"Released","","key is not pressed",25,null],[13,"Pressed","","key is pressed",25,null],[4,"WlKeyboardKeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",26,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",26,null],[4,"WlPointerAxis","","axis types",null,null],[13,"VerticalScroll","","",27,null],[13,"HorizontalScroll","","",27,null],[4,"WlPointerButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",28,null],[13,"Pressed","","the button is pressed",28,null],[4,"WlPointerAxisSource","","axis source types",null,null],[13,"Wheel","","a physical wheel",29,null],[13,"Finger","","finger on a touch surface",29,null],[13,"Continuous","","continuous coordinate space",29,null],[0,"WlSeatCapability","","seat capability bitmask",null,null],[3,"WlSeatCapability","wayland_client::wayland::seat::WlSeatCapability","",null,null],[17,"Pointer","","the seat has pointer devices",null,null],[17,"Keyboard","","the seat has one or more keyboards",null,null],[17,"Touch","","the seat has touch devices",null,null],[11,"hash","","",30,null],[11,"cmp","","",30,null],[11,"partial_cmp","","",30,null],[11,"lt","","",30,null],[11,"le","","",30,null],[11,"gt","","",30,null],[11,"ge","","",30,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",30,null],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,null],[11,"is_all","","Returns `true` if all flags are currently set.",30,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,null],[11,"insert","","Inserts the specified flags in-place.",30,null],[11,"remove","","Removes the specified flags in-place.",30,null],[11,"toggle","","Toggles the specified flags in-place.",30,null],[11,"bitor","","Returns the union of the two sets of flags.",30,null],[11,"bitor_assign","","Adds the set of flags.",30,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,null],[11,"bitxor_assign","","Toggles the set of flags.",30,null],[11,"bitand","","Returns the intersection between the two sets of flags.",30,null],[11,"bitand_assign","","Disables all flags disabled in the set.",30,null],[11,"sub","","Returns the set difference of the two sets of flags.",30,null],[11,"sub_assign","","Disables all flags enabled in the set.",30,null],[11,"not","","Returns the complement of this set of flags.",30,null],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"wlseatcapability"}}],[0,"shell","wayland_client::wayland","Objects related to the `wl_shell` global",null,null],[3,"WlShell","wayland_client::wayland::shell","create desktop-style surfaces",null,null],[3,"WlShellSurface","","desktop-style metadata interface",null,null],[4,"WlShellSurfaceEvent","","",null,null],[13,"Ping","","ping client",31,null],[13,"Configure","","suggest resize",31,null],[13,"PopupDone","","popup interaction is done",31,null],[4,"WlShellSurfaceFullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",32,null],[13,"Scale","","scale, preserve the surface&#39;s aspect ratio and center on output",32,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",32,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",32,null],[0,"WlShellSurfaceResize","","edge values for resizing",null,null],[3,"WlShellSurfaceResize","wayland_client::wayland::shell::WlShellSurfaceResize","",null,null],[17,"None","","",null,null],[17,"Top","","",null,null],[17,"Bottom","","",null,null],[17,"Left","","",null,null],[17,"TopLeft","","",null,null],[17,"BottomLeft","","",null,null],[17,"Right","","",null,null],[17,"TopRight","","",null,null],[17,"BottomRight","","",null,null],[11,"hash","","",33,null],[11,"cmp","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"fmt","","",33,null],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,null],[11,"is_all","","Returns `true` if all flags are currently set.",33,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,null],[11,"insert","","Inserts the specified flags in-place.",33,null],[11,"remove","","Removes the specified flags in-place.",33,null],[11,"toggle","","Toggles the specified flags in-place.",33,null],[11,"bitor","","Returns the union of the two sets of flags.",33,null],[11,"bitor_assign","","Adds the set of flags.",33,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,null],[11,"bitxor_assign","","Toggles the set of flags.",33,null],[11,"bitand","","Returns the intersection between the two sets of flags.",33,null],[11,"bitand_assign","","Disables all flags disabled in the set.",33,null],[11,"sub","","Returns the set difference of the two sets of flags.",33,null],[11,"sub_assign","","Disables all flags enabled in the set.",33,null],[11,"not","","Returns the complement of this set of flags.",33,null],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[0,"WlShellSurfaceTransient","wayland_client::wayland::shell","details of transient behaviour",null,null],[3,"WlShellSurfaceTransient","wayland_client::wayland::shell::WlShellSurfaceTransient","",null,null],[17,"Inactive","","do not set keyboard focus",null,null],[11,"hash","","",34,null],[11,"cmp","","",34,null],[11,"partial_cmp","","",34,null],[11,"lt","","",34,null],[11,"le","","",34,null],[11,"gt","","",34,null],[11,"ge","","",34,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"fmt","","",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",34,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,null],[11,"is_all","","Returns `true` if all flags are currently set.",34,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,null],[11,"insert","","Inserts the specified flags in-place.",34,null],[11,"remove","","Removes the specified flags in-place.",34,null],[11,"toggle","","Toggles the specified flags in-place.",34,null],[11,"bitor","","Returns the union of the two sets of flags.",34,null],[11,"bitor_assign","","Adds the set of flags.",34,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,null],[11,"bitxor_assign","","Toggles the set of flags.",34,null],[11,"bitand","","Returns the intersection between the two sets of flags.",34,null],[11,"bitand_assign","","Disables all flags disabled in the set.",34,null],[11,"sub","","Returns the set difference of the two sets of flags.",34,null],[11,"sub_assign","","Disables all flags enabled in the set.",34,null],[11,"not","","Returns the complement of this set of flags.",34,null],[11,"from_iter","","",34,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[0,"shm","wayland_client::wayland","Objects related to the `wl_shm` global",null,null],[3,"WlBuffer","wayland_client::wayland::shm","content for a wl_surface",null,null],[3,"WlShm","","shared memory support",null,null],[3,"WlShmPool","","a shared memory pool",null,null],[4,"WlBufferEvent","","",null,null],[13,"Release","","compositor releases buffer",35,null],[4,"WlShmEvent","","",null,null],[13,"Format","","pixel format description",36,null],[4,"WlShmFormat","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format",37,null],[13,"Xrgb8888","","32-bit RGB format",37,null],[13,"C8","","",37,null],[13,"Rgb332","","",37,null],[13,"Bgr233","","",37,null],[13,"Xrgb4444","","",37,null],[13,"Xbgr4444","","",37,null],[13,"Rgbx4444","","",37,null],[13,"Bgrx4444","","",37,null],[13,"Argb4444","","",37,null],[13,"Abgr4444","","",37,null],[13,"Rgba4444","","",37,null],[13,"Bgra4444","","",37,null],[13,"Xrgb1555","","",37,null],[13,"Xbgr1555","","",37,null],[13,"Rgbx5551","","",37,null],[13,"Bgrx5551","","",37,null],[13,"Argb1555","","",37,null],[13,"Abgr1555","","",37,null],[13,"Rgba5551","","",37,null],[13,"Bgra5551","","",37,null],[13,"Rgb565","","",37,null],[13,"Bgr565","","",37,null],[13,"Rgb888","","",37,null],[13,"Bgr888","","",37,null],[13,"Xbgr8888","","",37,null],[13,"Rgbx8888","","",37,null],[13,"Bgrx8888","","",37,null],[13,"Abgr8888","","",37,null],[13,"Rgba8888","","",37,null],[13,"Bgra8888","","",37,null],[13,"Xrgb2101010","","",37,null],[13,"Xbgr2101010","","",37,null],[13,"Rgbx1010102","","",37,null],[13,"Bgrx1010102","","",37,null],[13,"Argb2101010","","",37,null],[13,"Abgr2101010","","",37,null],[13,"Rgba1010102","","",37,null],[13,"Bgra1010102","","",37,null],[13,"Yuyv","","",37,null],[13,"Yvyu","","",37,null],[13,"Uyvy","","",37,null],[13,"Vyuy","","",37,null],[13,"Ayuv","","",37,null],[13,"Nv12","","",37,null],[13,"Nv21","","",37,null],[13,"Nv16","","",37,null],[13,"Nv61","","",37,null],[13,"Yuv410","","",37,null],[13,"Yvu410","","",37,null],[13,"Yuv411","","",37,null],[13,"Yvu411","","",37,null],[13,"Yuv420","","",37,null],[13,"Yvu420","","",37,null],[13,"Yuv422","","",37,null],[13,"Yvu422","","",37,null],[13,"Yuv444","","",37,null],[13,"Yvu444","","",37,null],[0,"subcompositor","wayland_client::wayland","Objects related to the `wl_subcompositor` global",null,null],[3,"WlSubcompositor","wayland_client::wayland::subcompositor","sub-surface compositing",null,null],[3,"WlSubsurface","","sub-surface interface to a wl_surface",null,null],[11,"fmt","wayland_client::wayland","",11,null],[11,"flush","","Non-blocking write to the server",38,null],[11,"create_event_iterator","","Create a new EventIterator",38,null],[11,"drop","","",38,null],[0,"extensions","wayland_client","Protocol extensions",null,null],[0,"presentation_time","wayland_client::extensions","Presentation Time protocol.",null,null],[3,"WpPresentation","wayland_client::extensions::presentation_time","timed presentation related wl_surface requests",null,null],[3,"WpPresentationFeedback","","presentation time feedback event",null,null],[4,"WpPresentationEvent","","",null,null],[13,"ClockId","","clock ID for timestamps",39,null],[4,"WpPresentationFeedbackEvent","","",null,null],[13,"SyncOutput","","presentation synchronized to this output",40,null],[13,"Presented","","the content update was displayed",40,null],[13,"Discarded","","the content update was not displayed",40,null],[4,"WpPresentationFeedbackKind","","bitmask of flags in presented event",null,null],[13,"Vsync","","presentation was vsync&#39;d",41,null],[13,"HwClock","","hardware provided the presentation timestamp",41,null],[13,"HwCompletion","","hardware signalled the start of the presentation",41,null],[13,"ZeroCopy","","presentation was done zero-copy",41,null],[4,"PresentationTimeProtocolEvent","","An event generated by the protocol presentation_time.",null,null],[13,"WpPresentation","","",42,null],[13,"WpPresentationFeedback","","",42,null],[0,"viewporter","wayland_client::extensions","Viewporter protocol.",null,null],[3,"WpViewporter","wayland_client::extensions::viewporter","surface cropping and scaling",null,null],[3,"WpViewport","","crop and scale interface to a wl_surface",null,null],[4,"ViewporterProtocolEvent","","An event generated by the protocol viewporter.",null,null],[0,"xdg_shell","wayland_client::extensions","[unstable] XDG Shell protocol.",null,null],[3,"XdgShell","wayland_client::extensions::xdg_shell","create desktop-style surfaces",null,null],[3,"XdgSurface","","A desktop window",null,null],[3,"XdgPopup","","short-lived, popup surfaces for menus",null,null],[4,"XdgShellEvent","","",null,null],[13,"Ping","","check if the client is alive",43,null],[4,"XdgSurfaceResizeEdge","","edge values for resizing",null,null],[13,"None","","",44,null],[13,"Top","","",44,null],[13,"Bottom","","",44,null],[13,"Left","","",44,null],[13,"TopLeft","","",44,null],[13,"BottomLeft","","",44,null],[13,"Right","","",44,null],[13,"TopRight","","",44,null],[13,"BottomRight","","",44,null],[4,"XdgSurfaceState","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",45,null],[13,"Fullscreen","","the surface is fullscreen",45,null],[13,"Resizing","","the surface is being resized",45,null],[13,"Activated","","the surface is now activated",45,null],[4,"XdgSurfaceEvent","","",null,null],[13,"Configure","","suggest a surface change",46,null],[13,"Close","","surface wants to be closed",46,null],[4,"XdgPopupEvent","","",null,null],[13,"PopupDone","","popup interaction is done",47,null],[4,"XdgShellUnstableV5ProtocolEvent","","An event generated by the protocol xdg_shell_unstable_v5.",null,null],[13,"XdgShell","","",48,null],[13,"XdgSurface","","",48,null],[13,"XdgPopup","","",48,null],[8,"Proxy","wayland_client","Common routines for manipulating wayland objects",null,null],[10,"ptr","","Get a pointer to the internal wayland object wrapped by this struct",49,null],[10,"interface","","Get a pointer to the definition of the interface implemented by this object.",49,null],[10,"interface_name","","The internal name of this interface, as advertized by the registry if it is a global.",49,{"inputs":[],"output":{"name":"str"}}],[10,"version","","The maximum version of this interface handled by the library.",49,{"inputs":[],"output":{"name":"u32"}}],[10,"id","","Get the id of this proxy",49,null],[10,"set_event_iterator","","Set the event iterator associated to this wayland object",49,null],[11,"hash","","",50,null],[11,"fmt","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"clone","","",50,null],[14,"wayland_env!","","This macro allows you to create a simple wayland environment handler.",null,null],[11,"hash","wayland_client::wayland::data_device::WlDataDeviceManagerDndAction","",16,null],[11,"cmp","","",16,null],[11,"partial_cmp","","",16,null],[11,"lt","","",16,null],[11,"le","","",16,null],[11,"gt","","",16,null],[11,"ge","","",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"empty","","Returns an empty set of flags.",16,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"all","","Returns the set containing all flags.",16,{"inputs":[],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",16,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",16,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",16,{"inputs":[{"name":"u32"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",16,null],[11,"is_all","","Returns `true` if all flags are currently set.",16,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",16,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",16,null],[11,"insert","","Inserts the specified flags in-place.",16,null],[11,"remove","","Removes the specified flags in-place.",16,null],[11,"toggle","","Toggles the specified flags in-place.",16,null],[11,"bitor","","Returns the union of the two sets of flags.",16,null],[11,"bitor_assign","","Adds the set of flags.",16,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",16,null],[11,"bitxor_assign","","Toggles the set of flags.",16,null],[11,"bitand","","Returns the intersection between the two sets of flags.",16,null],[11,"bitand_assign","","Disables all flags disabled in the set.",16,null],[11,"sub","","Returns the set difference of the two sets of flags.",16,null],[11,"sub_assign","","Disables all flags enabled in the set.",16,null],[11,"not","","Returns the complement of this set of flags.",16,null],[11,"from_iter","","",16,{"inputs":[{"name":"t"}],"output":{"name":"wldatadevicemanagerdndaction"}}],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceResize","",33,null],[11,"cmp","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"fmt","","",33,null],[11,"empty","","Returns an empty set of flags.",33,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"all","","Returns the set containing all flags.",33,{"inputs":[],"output":{"name":"wlshellsurfaceresize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",33,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",33,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",33,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",33,null],[11,"is_all","","Returns `true` if all flags are currently set.",33,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",33,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",33,null],[11,"insert","","Inserts the specified flags in-place.",33,null],[11,"remove","","Removes the specified flags in-place.",33,null],[11,"toggle","","Toggles the specified flags in-place.",33,null],[11,"bitor","","Returns the union of the two sets of flags.",33,null],[11,"bitor_assign","","Adds the set of flags.",33,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",33,null],[11,"bitxor_assign","","Toggles the set of flags.",33,null],[11,"bitand","","Returns the intersection between the two sets of flags.",33,null],[11,"bitand_assign","","Disables all flags disabled in the set.",33,null],[11,"sub","","Returns the set difference of the two sets of flags.",33,null],[11,"sub_assign","","Disables all flags enabled in the set.",33,null],[11,"not","","Returns the complement of this set of flags.",33,null],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfaceresize"}}],[11,"hash","wayland_client::wayland::shell::WlShellSurfaceTransient","",34,null],[11,"cmp","","",34,null],[11,"partial_cmp","","",34,null],[11,"lt","","",34,null],[11,"le","","",34,null],[11,"gt","","",34,null],[11,"ge","","",34,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"fmt","","",34,null],[11,"empty","","Returns an empty set of flags.",34,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"all","","Returns the set containing all flags.",34,{"inputs":[],"output":{"name":"wlshellsurfacetransient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",34,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",34,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",34,{"inputs":[{"name":"u32"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",34,null],[11,"is_all","","Returns `true` if all flags are currently set.",34,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",34,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",34,null],[11,"insert","","Inserts the specified flags in-place.",34,null],[11,"remove","","Removes the specified flags in-place.",34,null],[11,"toggle","","Toggles the specified flags in-place.",34,null],[11,"bitor","","Returns the union of the two sets of flags.",34,null],[11,"bitor_assign","","Adds the set of flags.",34,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",34,null],[11,"bitxor_assign","","Toggles the set of flags.",34,null],[11,"bitand","","Returns the intersection between the two sets of flags.",34,null],[11,"bitand_assign","","Disables all flags disabled in the set.",34,null],[11,"sub","","Returns the set difference of the two sets of flags.",34,null],[11,"sub_assign","","Disables all flags enabled in the set.",34,null],[11,"not","","Returns the complement of this set of flags.",34,null],[11,"from_iter","","",34,{"inputs":[{"name":"t"}],"output":{"name":"wlshellsurfacetransient"}}],[11,"hash","wayland_client::wayland::seat::WlSeatCapability","",30,null],[11,"cmp","","",30,null],[11,"partial_cmp","","",30,null],[11,"lt","","",30,null],[11,"le","","",30,null],[11,"gt","","",30,null],[11,"ge","","",30,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",30,null],[11,"empty","","Returns an empty set of flags.",30,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"all","","Returns the set containing all flags.",30,{"inputs":[],"output":{"name":"wlseatcapability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",30,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",30,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",30,{"inputs":[{"name":"u32"}],"output":{"name":"wlseatcapability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",30,null],[11,"is_all","","Returns `true` if all flags are currently set.",30,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",30,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",30,null],[11,"insert","","Inserts the specified flags in-place.",30,null],[11,"remove","","Removes the specified flags in-place.",30,null],[11,"toggle","","Toggles the specified flags in-place.",30,null],[11,"bitor","","Returns the union of the two sets of flags.",30,null],[11,"bitor_assign","","Adds the set of flags.",30,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",30,null],[11,"bitxor_assign","","Toggles the set of flags.",30,null],[11,"bitand","","Returns the intersection between the two sets of flags.",30,null],[11,"bitand_assign","","Disables all flags disabled in the set.",30,null],[11,"sub","","Returns the set difference of the two sets of flags.",30,null],[11,"sub_assign","","Disables all flags enabled in the set.",30,null],[11,"not","","Returns the complement of this set of flags.",30,null],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"wlseatcapability"}}],[11,"hash","wayland_client::wayland::output::WlOutputMode","",20,null],[11,"cmp","","",20,null],[11,"partial_cmp","","",20,null],[11,"lt","","",20,null],[11,"le","","",20,null],[11,"gt","","",20,null],[11,"ge","","",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"fmt","","",20,null],[11,"empty","","Returns an empty set of flags.",20,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"all","","Returns the set containing all flags.",20,{"inputs":[],"output":{"name":"wloutputmode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",20,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",20,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",20,{"inputs":[{"name":"u32"}],"output":{"name":"wloutputmode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",20,null],[11,"is_all","","Returns `true` if all flags are currently set.",20,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",20,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",20,null],[11,"insert","","Inserts the specified flags in-place.",20,null],[11,"remove","","Removes the specified flags in-place.",20,null],[11,"toggle","","Toggles the specified flags in-place.",20,null],[11,"bitor","","Returns the union of the two sets of flags.",20,null],[11,"bitor_assign","","Adds the set of flags.",20,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",20,null],[11,"bitxor_assign","","Toggles the set of flags.",20,null],[11,"bitand","","Returns the intersection between the two sets of flags.",20,null],[11,"bitand_assign","","Disables all flags disabled in the set.",20,null],[11,"sub","","Returns the set difference of the two sets of flags.",20,null],[11,"sub_assign","","Disables all flags enabled in the set.",20,null],[11,"not","","Returns the complement of this set of flags.",20,null],[11,"from_iter","","",20,{"inputs":[{"name":"t"}],"output":{"name":"wloutputmode"}}],[11,"fmt","wayland_client::wayland","",10,null],[11,"fmt","wayland_client::wayland::shm","",37,null],[11,"fmt","wayland_client::wayland::shell","",32,null],[11,"fmt","wayland_client::wayland::seat","",28,null],[11,"fmt","","",27,null],[11,"fmt","","",29,null],[11,"fmt","","",26,null],[11,"fmt","","",25,null],[11,"fmt","wayland_client::wayland::output","",18,null],[11,"fmt","","",19,null],[11,"ptr","wayland_client::wayland","",38,null],[11,"interface","","",38,null],[11,"interface_name","","",38,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",38,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",38,null],[11,"set_event_iterator","","",38,null],[11,"fmt","","",38,null],[11,"fmt","","",8,null],[11,"sync","","asynchronous roundtrip",38,null],[11,"get_registry","","get global registry object",38,null],[11,"ptr","","",51,null],[11,"interface","","",51,null],[11,"interface_name","","",51,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",51,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",51,null],[11,"set_event_iterator","","",51,null],[11,"fmt","","",51,null],[11,"fmt","","",9,null],[11,"bind","","bind an object to the display",51,null],[11,"ptr","","",52,null],[11,"interface","","",52,null],[11,"interface_name","","",52,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",52,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",52,null],[11,"set_event_iterator","","",52,null],[11,"fmt","","",52,null],[11,"fmt","","",7,null],[11,"ptr","wayland_client::wayland::compositor","",53,null],[11,"interface","","",53,null],[11,"interface_name","","",53,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",53,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",53,null],[11,"set_event_iterator","","",53,null],[11,"fmt","","",53,null],[11,"create_surface","","create new surface",53,null],[11,"create_region","","create new region",53,null],[11,"ptr","wayland_client::wayland::shm","",54,null],[11,"interface","","",54,null],[11,"interface_name","","",54,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",54,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",54,null],[11,"set_event_iterator","","",54,null],[11,"fmt","","",54,null],[11,"create_buffer","","create a buffer from the pool",54,null],[11,"resize","","change the size of the pool mapping",54,null],[11,"drop","","",54,null],[11,"ptr","","",55,null],[11,"interface","","",55,null],[11,"interface_name","","",55,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",55,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",55,null],[11,"set_event_iterator","","",55,null],[11,"fmt","","",55,null],[11,"fmt","","",36,null],[11,"create_pool","","create a shm pool",55,null],[11,"ptr","","",56,null],[11,"interface","","",56,null],[11,"interface_name","","",56,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",56,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",56,null],[11,"set_event_iterator","","",56,null],[11,"fmt","","",56,null],[11,"fmt","","",35,null],[11,"drop","","",56,null],[11,"ptr","wayland_client::wayland::data_device","",57,null],[11,"interface","","",57,null],[11,"interface_name","","",57,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",57,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",57,null],[11,"set_event_iterator","","",57,null],[11,"fmt","","",57,null],[11,"fmt","","",14,null],[11,"accept","","accept one of the offered mime types",57,null],[11,"receive","","request that the data is transferred",57,null],[11,"finish","","the offer will no longer be used",57,null],[11,"set_actions","","set the available/preferred drag-and-drop actions",57,null],[11,"drop","","",57,null],[11,"ptr","","",58,null],[11,"interface","","",58,null],[11,"interface_name","","",58,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",58,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",58,null],[11,"set_event_iterator","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",15,null],[11,"offer","","add an offered mime type",58,null],[11,"set_actions","","set the available drag-and-drop actions",58,null],[11,"drop","","",58,null],[11,"ptr","","",59,null],[11,"interface","","",59,null],[11,"interface_name","","",59,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",59,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",59,null],[11,"set_event_iterator","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",13,null],[11,"start_drag","","start drag-and-drop operation",59,null],[11,"set_selection","","copy data to the selection",59,null],[11,"drop","","",59,null],[11,"ptr","","",60,null],[11,"interface","","",60,null],[11,"interface_name","","",60,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",60,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",60,null],[11,"set_event_iterator","","",60,null],[11,"fmt","","",60,null],[11,"create_data_source","","create a new data source",60,null],[11,"get_data_device","","create a new data device",60,null],[11,"ptr","wayland_client::wayland::shell","",61,null],[11,"interface","","",61,null],[11,"interface_name","","",61,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",61,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",61,null],[11,"set_event_iterator","","",61,null],[11,"fmt","","",61,null],[11,"get_shell_surface","","create a shell surface from a surface",61,null],[11,"ptr","","",62,null],[11,"interface","","",62,null],[11,"interface_name","","",62,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",62,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",62,null],[11,"set_event_iterator","","",62,null],[11,"fmt","","",62,null],[11,"fmt","","",31,null],[11,"pong","","respond to a ping event",62,null],[11,"move_","","start an interactive move",62,null],[11,"resize","","start an interactive resize",62,null],[11,"set_toplevel","","make the surface a toplevel surface",62,null],[11,"set_transient","","make the surface a transient surface",62,null],[11,"set_fullscreen","","make the surface a fullscreen surface",62,null],[11,"set_popup","","make the surface a popup surface",62,null],[11,"set_maximized","","make the surface a maximized surface",62,null],[11,"set_title","","set surface title",62,null],[11,"set_class","","set surface class",62,null],[11,"ptr","wayland_client::wayland::compositor","",63,null],[11,"interface","","",63,null],[11,"interface_name","","",63,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",63,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",63,null],[11,"set_event_iterator","","",63,null],[11,"fmt","","",63,null],[11,"fmt","","",12,null],[11,"attach","","set the surface contents",63,null],[11,"damage","","mark part of the surface damaged",63,null],[11,"frame","","request a frame throttling hint",63,null],[11,"set_opaque_region","","set opaque region",63,null],[11,"set_input_region","","set input region",63,null],[11,"commit","","commit pending surface state",63,null],[11,"set_buffer_transform","","sets the buffer transformation",63,null],[11,"set_buffer_scale","","sets the buffer scaling factor",63,null],[11,"damage_buffer","","mark part of the surface damaged using buffer coordinates",63,null],[11,"drop","","",63,null],[11,"ptr","wayland_client::wayland::seat","",64,null],[11,"interface","","",64,null],[11,"interface_name","","",64,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",64,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",64,null],[11,"set_event_iterator","","",64,null],[11,"fmt","","",64,null],[11,"fmt","","",23,null],[11,"get_pointer","","return pointer object",64,null],[11,"get_keyboard","","return keyboard object",64,null],[11,"get_touch","","return touch object",64,null],[11,"drop","","",64,null],[11,"ptr","","",65,null],[11,"interface","","",65,null],[11,"interface_name","","",65,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",65,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",65,null],[11,"set_event_iterator","","",65,null],[11,"fmt","","",65,null],[11,"fmt","","",22,null],[11,"set_cursor","","set the pointer surface",65,null],[11,"drop","","",65,null],[11,"ptr","","",66,null],[11,"interface","","",66,null],[11,"interface_name","","",66,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",66,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",66,null],[11,"set_event_iterator","","",66,null],[11,"fmt","","",66,null],[11,"fmt","","",21,null],[11,"drop","","",66,null],[11,"ptr","","",67,null],[11,"interface","","",67,null],[11,"interface_name","","",67,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",67,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",67,null],[11,"set_event_iterator","","",67,null],[11,"fmt","","",67,null],[11,"fmt","","",24,null],[11,"drop","","",67,null],[11,"ptr","wayland_client::wayland::output","",68,null],[11,"interface","","",68,null],[11,"interface_name","","",68,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",68,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",68,null],[11,"set_event_iterator","","",68,null],[11,"fmt","","",68,null],[11,"fmt","","",17,null],[11,"ptr","wayland_client::wayland::compositor","",69,null],[11,"interface","","",69,null],[11,"interface_name","","",69,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",69,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",69,null],[11,"set_event_iterator","","",69,null],[11,"fmt","","",69,null],[11,"add","","add rectangle to region",69,null],[11,"subtract","","subtract rectangle from region",69,null],[11,"drop","","",69,null],[11,"ptr","wayland_client::wayland::subcompositor","",70,null],[11,"interface","","",70,null],[11,"interface_name","","",70,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",70,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",70,null],[11,"set_event_iterator","","",70,null],[11,"fmt","","",70,null],[11,"get_subsurface","","give a surface the role sub-surface",70,null],[11,"drop","","",70,null],[11,"ptr","","",71,null],[11,"interface","","",71,null],[11,"interface_name","","",71,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",71,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",71,null],[11,"set_event_iterator","","",71,null],[11,"fmt","","",71,null],[11,"set_position","","reposition the sub-surface",71,null],[11,"place_above","","restack the sub-surface",71,null],[11,"place_below","","restack the sub-surface",71,null],[11,"set_sync","","set sub-surface to synchronized mode",71,null],[11,"set_desync","","set sub-surface to desynchronized mode",71,null],[11,"drop","","",71,null],[11,"fmt","wayland_client::extensions::presentation_time","",42,null],[11,"fmt","","",41,null],[11,"ptr","","",72,null],[11,"interface","","",72,null],[11,"interface_name","","",72,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",72,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",72,null],[11,"set_event_iterator","","",72,null],[11,"fmt","","",72,null],[11,"fmt","","",39,null],[11,"feedback","","request presentation feedback information",72,null],[11,"drop","","",72,null],[11,"ptr","","",73,null],[11,"interface","","",73,null],[11,"interface_name","","",73,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",73,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",73,null],[11,"set_event_iterator","","",73,null],[11,"fmt","","",73,null],[11,"fmt","","",40,null],[11,"fmt","wayland_client::extensions::viewporter","",74,null],[11,"ptr","","",75,null],[11,"interface","","",75,null],[11,"interface_name","","",75,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",75,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",75,null],[11,"set_event_iterator","","",75,null],[11,"fmt","","",75,null],[11,"get_viewport","","extend surface interface for crop and scale",75,null],[11,"drop","","",75,null],[11,"ptr","","",76,null],[11,"interface","","",76,null],[11,"interface_name","","",76,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",76,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",76,null],[11,"set_event_iterator","","",76,null],[11,"fmt","","",76,null],[11,"set_source","","set the source rectangle for cropping",76,null],[11,"set_destination","","set the surface size for scaling",76,null],[11,"drop","","",76,null],[11,"fmt","wayland_client::extensions::xdg_shell","",48,null],[11,"fmt","","",44,null],[11,"fmt","","",45,null],[11,"ptr","","",77,null],[11,"interface","","",77,null],[11,"interface_name","","",77,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",77,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",77,null],[11,"set_event_iterator","","",77,null],[11,"fmt","","",77,null],[11,"fmt","","",43,null],[11,"use_unstable_version","","enable use of this unstable version",77,null],[11,"get_xdg_surface","","create a shell surface from a surface",77,null],[11,"get_xdg_popup","","create a popup for a surface",77,null],[11,"pong","","respond to a ping event",77,null],[11,"drop","","",77,null],[11,"ptr","","",78,null],[11,"interface","","",78,null],[11,"interface_name","","",78,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",78,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",78,null],[11,"set_event_iterator","","",78,null],[11,"fmt","","",78,null],[11,"fmt","","",46,null],[11,"set_parent","","set the parent of this surface",78,null],[11,"set_title","","set surface title",78,null],[11,"set_app_id","","set application ID",78,null],[11,"show_window_menu","","show the window menu",78,null],[11,"move_","","start an interactive move",78,null],[11,"resize","","start an interactive resize",78,null],[11,"ack_configure","","ack a configure event",78,null],[11,"set_window_geometry","","set the new window geometry",78,null],[11,"set_maximized","","maximize the window",78,null],[11,"unset_maximized","","unmaximize the window",78,null],[11,"set_fullscreen","","set the window as fullscreen on a monitor",78,null],[11,"unset_fullscreen","","",78,null],[11,"set_minimized","","set the window as minimized",78,null],[11,"drop","","",78,null],[11,"ptr","","",79,null],[11,"interface","","",79,null],[11,"interface_name","","",79,{"inputs":[],"output":{"name":"str"}}],[11,"version","","",79,{"inputs":[],"output":{"name":"u32"}}],[11,"id","","",79,null],[11,"set_event_iterator","","",79,null],[11,"fmt","","",79,null],[11,"fmt","","",47,null],[11,"drop","","",79,null]],"paths":[[4,"Event"],[3,"EventIterator"],[3,"ReadEventsGuard"],[3,"WlEglSurface"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[4,"WlCallbackEvent"],[4,"WlDisplayEvent"],[4,"WlRegistryEvent"],[4,"WaylandProtocolEvent"],[4,"ConnectError"],[4,"WlSurfaceEvent"],[4,"WlDataDeviceEvent"],[4,"WlDataOfferEvent"],[4,"WlDataSourceEvent"],[3,"WlDataDeviceManagerDndAction"],[4,"WlOutputEvent"],[4,"WlOutputSubpixel"],[4,"WlOutputTransform"],[3,"WlOutputMode"],[4,"WlKeyboardEvent"],[4,"WlPointerEvent"],[4,"WlSeatEvent"],[4,"WlTouchEvent"],[4,"WlKeyboardKeyState"],[4,"WlKeyboardKeymapFormat"],[4,"WlPointerAxis"],[4,"WlPointerButtonState"],[4,"WlPointerAxisSource"],[3,"WlSeatCapability"],[4,"WlShellSurfaceEvent"],[4,"WlShellSurfaceFullscreenMethod"],[3,"WlShellSurfaceResize"],[3,"WlShellSurfaceTransient"],[4,"WlBufferEvent"],[4,"WlShmEvent"],[4,"WlShmFormat"],[3,"WlDisplay"],[4,"WpPresentationEvent"],[4,"WpPresentationFeedbackEvent"],[4,"WpPresentationFeedbackKind"],[4,"PresentationTimeProtocolEvent"],[4,"XdgShellEvent"],[4,"XdgSurfaceResizeEdge"],[4,"XdgSurfaceState"],[4,"XdgSurfaceEvent"],[4,"XdgPopupEvent"],[4,"XdgShellUnstableV5ProtocolEvent"],[8,"Proxy"],[3,"ProxyId"],[3,"WlRegistry"],[3,"WlCallback"],[3,"WlCompositor"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"WlDataDeviceManager"],[3,"WlShell"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"WlOutput"],[3,"WlRegion"],[3,"WlSubcompositor"],[3,"WlSubsurface"],[3,"WpPresentation"],[3,"WpPresentationFeedback"],[4,"ViewporterProtocolEvent"],[3,"WpViewporter"],[3,"WpViewport"],[3,"XdgShell"],[3,"XdgSurface"],[3,"XdgPopup"]]};
searchIndex["wayland_scanner"] = {"doc":"","items":[],"paths":[]};
searchIndex["wayland_sys"] = {"doc":"FFI bindings to the wayland system libraries.","items":[[6,"pid_t","wayland_sys","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[0,"common","","Various types and functions that are used by both the client and the server\nlibraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",0,null],[12,"signature","","",0,null],[12,"types","","",0,null],[3,"wl_interface","","",null,null],[12,"name","","",1,null],[12,"version","","",1,null],[12,"request_count","","",1,null],[12,"requests","","",1,null],[12,"event_count","","",1,null],[12,"events","","",1,null],[3,"wl_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[3,"wl_array","","",null,null],[12,"size","","",3,null],[12,"alloc","","",3,null],[12,"data","","",3,null],[3,"wl_argument","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",4,null],[12,"wl_display_connect","","",4,null],[12,"wl_display_disconnect","","",4,null],[12,"wl_display_get_fd","","",4,null],[12,"wl_display_roundtrip","","",4,null],[12,"wl_display_read_events","","",4,null],[12,"wl_display_prepare_read","","",4,null],[12,"wl_display_cancel_read","","",4,null],[12,"wl_display_dispatch","","",4,null],[12,"wl_display_dispatch_pending","","",4,null],[12,"wl_display_get_error","","",4,null],[12,"wl_display_get_protocol_error","","",4,null],[12,"wl_display_flush","","",4,null],[12,"wl_event_queue_destroy","","",4,null],[12,"wl_display_create_queue","","",4,null],[12,"wl_display_roundtrip_queue","","",4,null],[12,"wl_display_prepare_read_queue","","",4,null],[12,"wl_display_dispatch_queue","","",4,null],[12,"wl_display_dispatch_queue_pending","","",4,null],[12,"wl_proxy_create","","",4,null],[12,"wl_proxy_destroy","","",4,null],[12,"wl_proxy_add_listener","","",4,null],[12,"wl_proxy_get_listener","","",4,null],[12,"wl_proxy_add_dispatcher","","",4,null],[12,"wl_proxy_marshal_array_constructor","","",4,null],[12,"wl_proxy_marshal_array","","",4,null],[12,"wl_proxy_set_user_data","","",4,null],[12,"wl_proxy_get_user_data","","",4,null],[12,"wl_proxy_get_id","","",4,null],[12,"wl_proxy_get_class","","",4,null],[12,"wl_proxy_set_queue","","",4,null],[12,"wl_log_set_handler_client","","",4,null],[12,"wl_list_init","","",4,null],[12,"wl_list_insert","","",4,null],[12,"wl_list_remove","","",4,null],[12,"wl_list_length","","",4,null],[12,"wl_list_empty","","",4,null],[12,"wl_list_insert_list","","",4,null],[12,"wl_array_init","","",4,null],[12,"wl_array_release","","",4,null],[12,"wl_array_add","","",4,null],[12,"wl_array_copy","","",4,null],[12,"wl_proxy_marshal_constructor","","",4,null],[12,"wl_proxy_marshal","","",4,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",5,null],[11,"deref","","",6,null],[0,"server","wayland_sys","Bindings to the client library `libwayland-server.so`",null,null],[3,"WaylandServer","wayland_sys::server","",null,null],[12,"wl_client_flush","","",7,null],[12,"wl_client_destroy","","",7,null],[12,"wl_client_get_display","","",7,null],[12,"wl_client_get_credentials","","",7,null],[12,"wl_client_get_object","","",7,null],[12,"wl_client_add_destroy_listener","","",7,null],[12,"wl_client_get_destroy_listener","","",7,null],[12,"wl_client_post_no_memory","","",7,null],[12,"wl_resource_create","","",7,null],[12,"wl_client_create","","",7,null],[12,"wl_display_create","","",7,null],[12,"wl_display_destroy","","",7,null],[12,"wl_display_get_serial","","",7,null],[12,"wl_display_next_serial","","",7,null],[12,"wl_display_add_socket","","",7,null],[12,"wl_display_add_socket_auto","","",7,null],[12,"wl_display_add_shm_format","","",7,null],[12,"wl_display_get_additional_shm_formats","","",7,null],[12,"wl_display_get_event_loop","","",7,null],[12,"wl_display_terminate","","",7,null],[12,"wl_display_run","","",7,null],[12,"wl_display_flush_clients","","",7,null],[12,"wl_display_add_destroy_listener","","",7,null],[12,"wl_display_get_destroy_listener","","",7,null],[12,"wl_global_create","","",7,null],[12,"wl_display_init_shm","","",7,null],[12,"wl_event_loop_create","","",7,null],[12,"wl_event_loop_destroy","","",7,null],[12,"wl_event_loop_add_fd","","",7,null],[12,"wl_event_loop_fd_update","","",7,null],[12,"wl_event_lopp_add_timer","","",7,null],[12,"wl_event_loop_add_signal","","",7,null],[12,"wl_event_loop_dispatch","","",7,null],[12,"wl_event_loop_dispatch_idle","","",7,null],[12,"wl_event_loop_add_idle","","",7,null],[12,"wl_event_loop_get_fd","","",7,null],[12,"wl_event_loop_add_destroy_listener","","",7,null],[12,"wl_event_loop_get_destroy_listener","","",7,null],[12,"wl_event_source_timer_update","","",7,null],[12,"wl_event_source_remove","","",7,null],[12,"wl_event_source_check","","",7,null],[12,"wl_global_destroy","","",7,null],[12,"wl_resource_post_event_array","","",7,null],[12,"wl_resource_queue_event_array","","",7,null],[12,"wl_resource_post_no_memory","","",7,null],[12,"wl_resource_set_implementation","","",7,null],[12,"wl_resource_set_dispatcher","","",7,null],[12,"wl_resource_destroy","","",7,null],[12,"wl_resource_get_client","","",7,null],[12,"wl_resource_get_id","","",7,null],[12,"wl_resource_get_link","","",7,null],[12,"w_resource_from_link","","",7,null],[12,"wl_resource_find_for_client","","",7,null],[12,"wl_resource_set_user_data","","",7,null],[12,"wl_resource_get_user_data","","",7,null],[12,"wl_resource_get_version","","",7,null],[12,"wl_resource_set_destructor","","",7,null],[12,"wl_resource_instance_of","","",7,null],[12,"wl_resource_add_destroy_listener","","",7,null],[12,"wl_resource_get_destroy_listener","","",7,null],[12,"wl_shm_buffer_begin_access","","",7,null],[12,"wl_shm_buffer_end_access","","",7,null],[12,"wl_shm_buffer_get","","",7,null],[12,"wl_shm_buffer_get_data","","",7,null],[12,"wl_shm_buffer_get_stride","","",7,null],[12,"wl_shm_buffer_get_format","","",7,null],[12,"wl_shm_buffer_get_width","","",7,null],[12,"wl_shm_buffer_get_heigth","","",7,null],[12,"wl_log_set_handler_server","","",7,null],[12,"wl_list_init","","",7,null],[12,"wl_list_insert","","",7,null],[12,"wl_list_remove","","",7,null],[12,"wl_list_length","","",7,null],[12,"wl_list_empty","","",7,null],[12,"wl_list_insert_list","","",7,null],[12,"wl_array_init","","",7,null],[12,"wl_array_release","","",7,null],[12,"wl_array_add","","",7,null],[12,"wl_array_copy","","",7,null],[12,"wl_resource_post_event","","",7,null],[12,"wl_resource_queue_event","","",7,null],[12,"wl_resource_post_error","","",7,null],[3,"WAYLAND_SERVER_OPTION","","",null,null],[3,"WAYLAND_SERVER_HANDLE","","",null,null],[4,"wl_client","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_loop","","",null,null],[4,"wl_event_source","","",null,null],[4,"wl_global","","",null,null],[4,"wl_listener","","",null,null],[4,"wl_resource","","",null,null],[4,"wl_shm_buffer","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[6,"wl_event_loop_fd_func_t","","",null,null],[6,"wl_event_loop_timer_func_t","","",null,null],[6,"wl_event_loop_signal_func_t","","",null,null],[6,"wl_event_loop_idle_func_t","","",null,null],[6,"wl_global_bind_func_t","","",null,null],[6,"wl_notify_func_t","","",null,null],[6,"wl_resource_destroy_func_t","","",null,null],[11,"open","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",8,null],[11,"deref","","",9,null],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",10,null],[12,"wl_egl_window_destroy","","",10,null],[12,"wl_egl_window_resize","","",10,null],[12,"wl_egl_window_get_attached_size","","",10,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",11,null],[11,"deref","","",12,null],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",13,null],[12,"height","","actual height",13,null],[12,"hotspot_x","","hot spot x (must be inside image)",13,null],[12,"hotspot_y","","hot spot y (must be inside image)",13,null],[12,"delay","","animation delay to next frame",13,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",14,null],[12,"images","","",14,null],[12,"name","","",14,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",15,null],[12,"wl_cursor_theme_destroy","","",15,null],[12,"wl_cursor_theme_get_cursor","","",15,null],[12,"wl_cursor_image_get_buffer","","",15,null],[12,"wl_cursor_frame","","",15,null],[12,"wl_cursor_frame_and_duration","","",15,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"deref","","",16,null],[11,"deref","","",17,null],[14,"ffi_dispatch!","wayland_sys","",null,null]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[3,"WaylandClient"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"WaylandServer"],[3,"WAYLAND_SERVER_OPTION"],[3,"WAYLAND_SERVER_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
initSearch(searchIndex);
